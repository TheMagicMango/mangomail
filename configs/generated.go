// Code generated by internal/config/generate.
// DO NOT EDIT.

package configs

import (
	"fmt"
	"github.com/spf13/viper"
	"os"
	"strings"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	MANGOMAIL_RATE_LIMIT     = "MANGOMAIL_RATE_LIMIT"
	MANGOMAIL_RESEND_API_KEY = "MANGOMAIL_RESEND_API_KEY"
	MANGOMAIL_LOG_LEVEL      = "MANGOMAIL_LOG_LEVEL"

	// File variants

	MANGOMAIL_RESEND_API_KEY_FILE = "MANGOMAIL_RESEND_API_KEY_FILE"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	viper.SetDefault(MANGOMAIL_RATE_LIMIT, "2")

	// no default for MANGOMAIL_RESEND_API_KEY

	viper.SetDefault(MANGOMAIL_LOG_LEVEL, "info")

}

// MangomailConfig holds configuration values for the mangomail service.
type MangomailConfig struct {

	// Maximum number of email requests per second (rate limit)
	MangomailRateLimit uint64 `mapstructure:"MANGOMAIL_RATE_LIMIT"`

	// Resend API key for sending emails. Can be loaded from file using MANGOMAIL_RESEND_API_KEY_FILE
	MangomailResendApiKey RedactedString `mapstructure:"MANGOMAIL_RESEND_API_KEY"`

	// Log level for the service (debug, info, warn, error)
	MangomailLogLevel LogLevel `mapstructure:"MANGOMAIL_LOG_LEVEL"`
}

// LoadMangomailConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadMangomailConfig() (*MangomailConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg MangomailConfig
	var err error

	cfg.MangomailRateLimit, err = GetMangomailRateLimit()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get MANGOMAIL_RATE_LIMIT: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("MANGOMAIL_RATE_LIMIT is required for the mangomail service: %w", err)
	}

	cfg.MangomailResendApiKey, err = GetMangomailResendApiKey()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get MANGOMAIL_RESEND_API_KEY: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("MANGOMAIL_RESEND_API_KEY is required for the mangomail service: %w", err)
	}

	cfg.MangomailLogLevel, err = GetMangomailLogLevel()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get MANGOMAIL_LOG_LEVEL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("MANGOMAIL_LOG_LEVEL is required for the mangomail service: %w", err)
	}

	return &cfg, nil
}

// GetMangomailRateLimit returns the value for the environment variable MANGOMAIL_RATE_LIMIT.
func GetMangomailRateLimit() (uint64, error) {
	s := viper.GetString(MANGOMAIL_RATE_LIMIT)
	if s != "" {
		v, err := toUint64(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MANGOMAIL_RATE_LIMIT, err)
		}
		return v, nil
	}
	return notDefineduint64(), fmt.Errorf("%s: %w", MANGOMAIL_RATE_LIMIT, ErrNotDefined)
}

// GetMangomailResendApiKey returns the value for the environment variable MANGOMAIL_RESEND_API_KEY.
func GetMangomailResendApiKey() (RedactedString, error) {
	s := viper.GetString(MANGOMAIL_RESEND_API_KEY)
	if s == "" {
		filename := viper.GetString(MANGOMAIL_RESEND_API_KEY_FILE)
		contents, err := os.ReadFile(filename)
		if err != nil {
			return notDefinedRedactedString(), fmt.Errorf("failed to parse %s: %w", MANGOMAIL_RESEND_API_KEY_FILE, err)
		}
		s = strings.TrimSpace(string(contents))
	}
	if s != "" {
		v, err := toRedactedString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MANGOMAIL_RESEND_API_KEY, err)
		}
		return v, nil
	}
	return notDefinedRedactedString(), fmt.Errorf("%s: %w", MANGOMAIL_RESEND_API_KEY, ErrNotDefined)
}

// GetMangomailLogLevel returns the value for the environment variable MANGOMAIL_LOG_LEVEL.
func GetMangomailLogLevel() (LogLevel, error) {
	s := viper.GetString(MANGOMAIL_LOG_LEVEL)
	if s != "" {
		v, err := toLogLevel(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MANGOMAIL_LOG_LEVEL, err)
		}
		return v, nil
	}
	return notDefinedLogLevel(), fmt.Errorf("%s: %w", MANGOMAIL_LOG_LEVEL, ErrNotDefined)
}
